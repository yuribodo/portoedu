import OpenAI from 'openai'
import { env } from '../config/env.js'
import type { UserProfile } from '../types/opportunity.js'

/**
 * Cliente OpenAI configurado
 */
const openai = new OpenAI({
  apiKey: env.OPENAI_API_KEY,
})

/**
 * Mensagem do chat (formato OpenAI)
 */
export interface ChatMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

/**
 * Contexto de uma oportunidade espec√≠fica
 */
export interface OpportunityContext {
  id: string
  title: string
  category: string
  shortDescription: string
  fullDescription: string
  requirements: Array<{
    type: string
    description: string
    required: boolean
  }>
  benefits: Array<{
    icon: string
    title: string
    description: string
  }>
  steps: Array<{
    order: number
    title: string
    description: string
  }>
  deadline?: string
  hasDeadline: boolean
  mainBenefit: string
  officialLink: string
  targetAudience: string
}

/**
 * Oportunidade com score de compatibilidade para contexto do chat
 */
export interface OpportunityWithScore {
  id: string
  title: string
  category: string
  shortDescription: string
  fullDescription: string
  requirements: Array<{
    type: string
    description: string
    required: boolean
  }>
  benefits: Array<{
    icon: string
    title: string
    description: string
  }>
  steps: Array<{
    order: number
    title: string
    description: string
  }>
  deadline?: string
  hasDeadline: boolean
  mainBenefit: string
  officialLink: string
  targetAudience: string
  compatibilityScore?: number // Score de 0 a 100
}

/**
 * Contexto de m√∫ltiplas oportunidades para chat de explora√ß√£o
 */
export interface OpportunitiesContext {
  opportunities: OpportunityWithScore[]
  totalCount: number
  hasFilters: boolean
}

/**
 * Request do chat
 */
export interface ChatRequest {
  message: string
  conversationHistory?: ChatMessage[]
  userProfile?: UserProfile
  opportunityContext?: OpportunityContext // Para chat de oportunidade espec√≠fica
  opportunitiesContext?: OpportunitiesContext // Para chat de explora√ß√£o de m√∫ltiplas oportunidades
}

/**
 * Response do chat
 */
export interface ChatResponse {
  message: string
  suggestedActions?: Array<{
    type: string
    label: string
  }>
}

/**
 * Cria o prompt para contexto de m√∫ltiplas oportunidades (explora√ß√£o)
 */
function createOpportunitiesPrompt(opportunitiesContext: OpportunitiesContext): string {
  const { opportunities, totalCount, hasFilters } = opportunitiesContext

  // Ordena oportunidades por score de compatibilidade (maior para menor)
  const sortedOpportunities = [...opportunities].sort((a, b) => {
    const scoreA = a.compatibilityScore ?? 0
    const scoreB = b.compatibilityScore ?? 0
    return scoreB - scoreA
  })

  // Top 5 oportunidades para contexto detalhado
  const topOpportunities = sortedOpportunities.slice(0, 5)

  // Lista todas as oportunidades com scores (resumo)
  const allOpportunitiesSummary = sortedOpportunities
    .map((opp, i) => {
      const score = opp.compatibilityScore ? ` (${opp.compatibilityScore}% compat√≠vel)` : ''
      return `${i + 1}. ${opp.title} - ${opp.category}${score}`
    })
    .join('\n')

  // Detalhes das top 5
  const topOpportunitiesDetails = topOpportunities
    .map((opp, i) => {
      const score = opp.compatibilityScore ? ` (Compatibilidade: ${opp.compatibilityScore}%)` : ''
      const deadline = opp.hasDeadline && opp.deadline
        ? `\n   ‚è∞ Prazo: ${opp.deadline}`
        : '\n   ‚è∞ Inscri√ß√µes abertas'

      return `
üìå ${i + 1}. ${opp.title}${score}
   üè∑Ô∏è Categoria: ${opp.category}
   üìù ${opp.shortDescription}
   üí° Benef√≠cio principal: ${opp.mainBenefit}${deadline}
   üéØ P√∫blico: ${opp.targetAudience}
   üîó ${opp.officialLink}
      `.trim()
    })
    .join('\n\n')

  return `
CONTEXTO DE EXPLORA√á√ÉO DE OPORTUNIDADES:
Voc√™ est√° ajudando o usu√°rio a explorar e comparar ${opportunities.length} oportunidade(s) ${hasFilters ? 'filtradas' : 'dispon√≠veis'} de um total de ${totalCount}.

üìä TODAS AS OPORTUNIDADES VIS√çVEIS:
${allOpportunitiesSummary}

üîù TOP ${topOpportunities.length} OPORTUNIDADES (Detalhadas):
${topOpportunitiesDetails}

INSTRU√á√ïES ESPECIAIS PARA CHAT DE EXPLORA√á√ÉO:
- Ajude o usu√°rio a COMPARAR e EXPLORAR as oportunidades listadas acima
- Use os scores de compatibilidade para fazer recomenda√ß√µes personalizadas
- Se o usu√°rio perguntar sobre uma oportunidade espec√≠fica, use os detalhes fornecidos
- Se perguntar sobre compara√ß√µes, considere categorias, prazos e compatibilidade
- Sugira as oportunidades mais compat√≠veis quando apropriado
- Se o usu√°rio buscar algo espec√≠fico, filtre mentalmente as oportunidades relevantes
- Incentive o usu√°rio a clicar nas oportunidades que mais combinam com ele
- Seja espec√≠fica e pr√°tica, citando nomes reais das oportunidades
- Se houver oportunidades com prazo pr√≥ximo, mencione com urg√™ncia mas sem press√£o

IMPORTANTE:
- Responda perguntas sobre QUALQUER uma das ${opportunities.length} oportunidades listadas
- Priorize oportunidades com maior compatibilidade nas recomenda√ß√µes
- Seja direta e objetiva, evite listas longas (m√°ximo 3-4 sugest√µes)
- Personalize com base no perfil do usu√°rio (se dispon√≠vel)
`
}

/**
 * Cria o system prompt da Porti baseado no perfil do usu√°rio e contexto da oportunidade
 */
function createSystemPrompt(
  userProfile?: UserProfile,
  opportunityContext?: OpportunityContext,
  opportunitiesContext?: OpportunitiesContext
): string {
  const profileContext = userProfile
    ? `
Contexto do usu√°rio:
${userProfile.nome ? `- Nome: ${userProfile.nome}\n` : ''}- Idade: ${userProfile.idade || 'n√£o informada'}
- Escola p√∫blica: ${userProfile.escolaPublica ? 'Sim' : userProfile.escolaPublica === false ? 'N√£o' : 'n√£o informado'}
- Interesses: ${userProfile.interesses?.join(', ') || 'n√£o informados'}
`
    : 'O usu√°rio ainda n√£o forneceu informa√ß√µes de perfil.'

  // Contexto de oportunidade √∫nica (p√°gina de detalhes)
  const opportunityInfo = opportunityContext
    ? `

CONTEXTO DA OPORTUNIDADE ATUAL:
Voc√™ est√° ajudando o usu√°rio a entender melhor a seguinte oportunidade:

üìã INFORMA√á√ïES B√ÅSICAS:
- T√≠tulo: ${opportunityContext.title}
- Categoria: ${opportunityContext.category}
- Descri√ß√£o: ${opportunityContext.shortDescription}
- P√∫blico-alvo: ${opportunityContext.targetAudience}

üí∞ BENEF√çCIO PRINCIPAL:
${opportunityContext.mainBenefit}

üìù REQUISITOS:
${opportunityContext.requirements.map((req, i) => `${i + 1}. ${req.description}${req.required ? ' (OBRIGAT√ìRIO)' : ' (opcional)'}`).join('\n')}

üéÅ BENEF√çCIOS:
${opportunityContext.benefits.map((b, i) => `${i + 1}. ${b.title}: ${b.description}`).join('\n')}

üìã PASSOS PARA PARTICIPAR:
${opportunityContext.steps.slice(0, 5).map((s) => `${s.order}. ${s.title}: ${s.description}`).join('\n')}

‚è∞ PRAZO:
${opportunityContext.hasDeadline && opportunityContext.deadline
  ? `Inscri√ß√µes at√© ${opportunityContext.deadline}`
  : 'Inscri√ß√µes abertas o ano todo'}

üîó Site oficial: ${opportunityContext.officialLink}

INSTRU√á√ïES ESPECIAIS PARA CHAT CONTEXTUAL:
- Responda perguntas ESPEC√çFICAS sobre esta oportunidade
- Use as informa√ß√µes acima para dar respostas precisas e √∫teis
- Se o usu√°rio perguntar sobre requisitos, cite os requisitos reais da oportunidade
- Se perguntar sobre prazos, use a data real do deadline
- Se perguntar como participar, cite os passos espec√≠ficos
- Seja espec√≠fica e evite respostas gen√©ricas
- Incentive o usu√°rio a se inscrever se ele atender aos requisitos
- Se ele N√ÉO atender a um requisito obrigat√≥rio, seja honesta mas gentil
`
    : ''

  // Contexto de m√∫ltiplas oportunidades (p√°gina de listagem)
  const opportunitiesInfo = opportunitiesContext
    ? createOpportunitiesPrompt(opportunitiesContext)
    : ''

  return `Voc√™ √© a Porti, uma capivara estudiosa e gentil que ajuda jovens brasileiros a descobrir oportunidades educacionais e benef√≠cios sociais.

PERSONALIDADE:
- Amig√°vel, paciente e encorajadora (estilo Duolingo)
- Usa linguagem casual mas respeitosa
- Emp√°tica com desafios de jovens de baixa renda
- Celebra pequenas conquistas
- Nunca julga, sempre apoia

OBJETIVO:
Ajudar o usu√°rio a:
1. Entender seu perfil (idade, escola, interesses, situa√ß√£o financeira)
2. Descobrir oportunidades educacionais (bolsas, cursos, interc√¢mbios, etc)
3. Entender os passos pr√°ticos para aproveitar cada oportunidade
4. Sentir-se motivado e capaz de alcan√ßar seus objetivos

ESTILO DE COMUNICA√á√ÉO:
- Frases curtas e objetivas
- Perguntas diretas (uma de cada vez)
- Use emojis com modera√ß√£o (1-2 por mensagem)
- Evite jarg√µes complicados
- Explique siglas quando necess√°rio (ex: "ENEM (Exame Nacional do Ensino M√©dio)")
- IMPORTANTE: Se souber o nome do usu√°rio, SEMPRE use-o de forma natural na conversa para criar conex√£o pessoal

IMPORTANTE:
- Sempre baseie recomenda√ß√µes no perfil real do usu√°rio
- Seja honesta sobre requisitos e chances realistas
- Incentive mas n√£o crie falsas expectativas
- Sugira pr√≥ximos passos concretos e acion√°veis
- Se n√£o souber a resposta, seja honesta e oriente o usu√°rio a buscar fontes oficiais

${profileContext}

INSTRU√á√ÉO ESPECIAL SOBRE NOME:
${userProfile?.nome ? `O nome do usu√°rio √© ${userProfile.nome}. Use o nome dele/dela naturalmente nas respostas para criar conex√£o. Exemplo: "Ol√° ${userProfile.nome}!", "${userProfile.nome}, essa oportunidade...", "Entendo sua d√∫vida, ${userProfile.nome}..."` : 'O usu√°rio n√£o informou o nome ainda.'}
${opportunityInfo}
${opportunitiesInfo}

Converse de forma natural e acolhedora. Seu objetivo √© fazer o usu√°rio se sentir apoiado e confiante!`
}

/**
 * Envia mensagem para o chat da Porti
 */
export async function sendChatMessage(request: ChatRequest): Promise<ChatResponse> {
  try {
    const systemPrompt = createSystemPrompt(
      request.userProfile,
      request.opportunityContext,
      request.opportunitiesContext
    )

    const messages: ChatMessage[] = [
      { role: 'system', content: systemPrompt },
      ...(request.conversationHistory || []),
      { role: 'user', content: request.message },
    ]

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini', // Modelo mais barato e r√°pido para o hackathon
      messages: messages as any,
      temperature: 0.7, // Criativa mas mais focada em seguir instru√ß√µes
      max_tokens: 400, // Respostas concisas
      presence_penalty: 0.6, // Evita repeti√ß√£o
      frequency_penalty: 0.3,
    })

    const assistantMessage = completion.choices[0]?.message?.content ||
      'Desculpe, n√£o consegui processar sua mensagem. Pode tentar novamente? üòÖ'

    // TODO: Implementar l√≥gica para detectar a√ß√µes sugeridas no futuro
    // Por enquanto, retorna apenas a mensagem
    return {
      message: assistantMessage,
      suggestedActions: [],
    }
  } catch (error) {
    console.error('Erro ao chamar OpenAI:', error)

    // Tratamento de erros espec√≠ficos
    if (error instanceof OpenAI.APIError) {
      if (error.status === 401) {
        throw new Error('API Key da OpenAI inv√°lida. Verifique suas credenciais.')
      }
      if (error.status === 429) {
        throw new Error('Limite de requisi√ß√µes atingido. Tente novamente em alguns segundos.')
      }
      if (error.status === 500) {
        throw new Error('Erro no servidor da OpenAI. Tente novamente mais tarde.')
      }
    }

    throw new Error('Erro ao processar mensagem. Tente novamente.')
  }
}

/**
 * Valida se a API Key est√° configurada
 */
export function validateOpenAIKey(): boolean {
  return !!env.OPENAI_API_KEY && env.OPENAI_API_KEY.length > 0
}

// ============= RECOMENDA√á√ïES =============

/**
 * Tipo simplificado de oportunidade para contexto da IA
 */
interface OpportunityForAI {
  id: string
  title: string
  category: string
  icon: string
  shortDescription: string
  deadline?: Date
}

/**
 * Gera mensagem amig√°vel de boas-vindas citando top oportunidades
 *
 * Esta fun√ß√£o √© chamada APENAS UMA VEZ ap√≥s o usu√°rio completar o form.
 * Ela gera a mensagem final que a Porti envia citando as melhores oportunidades.
 */
export async function generateWelcomeSummary(
  userProfile: UserProfile,
  topOpportunities: OpportunityForAI[],
  totalOpportunities: number
): Promise<string> {
  try {
    const opportunitiesContext = topOpportunities
      .map((opp, index) =>
        `${index + 1}. ${opp.icon} ${opp.title} - ${opp.shortDescription}`
      )
      .join('\n')

    const prompt = `
Voc√™ √© a Porti, uma capivara gentil e encorajadora que ajuda jovens a descobrir oportunidades educacionais.

PERFIL DO USU√ÅRIO:
${userProfile.nome ? `- Nome: ${userProfile.nome}` : ''}
- Idade: ${userProfile.idade || 'n√£o informada'}
- Escola p√∫blica: ${userProfile.escolaPublica ? 'Sim' : 'N√£o'}
- Interesses: ${userProfile.interesses?.join(', ') || 'n√£o informados'}

CONTEXTO:
Voc√™ acabou de conhecer este jovem atrav√©s de um formul√°rio gamificado (chat).
Encontrou ${totalOpportunities} oportunidades compat√≠veis com o perfil dele.

AS TOP ${topOpportunities.length} OPORTUNIDADES S√ÉO:
${opportunitiesContext}

SUA TAREFA:
Escrever uma mensagem CURTA e amig√°vel (m√°ximo 3-4 linhas + lista) que:
1. Sauda√ß√£o r√°pida e direta${userProfile.nome ? ` (use o nome "${userProfile.nome}")` : ''}
2. Liste as top ${topOpportunities.length} oportunidades com descri√ß√£o BREVE (1 linha por item)
3. Mencione o total (${totalOpportunities} oportunidades)
4. Call-to-action simples

ESTILO:
- SEJA BREVE! Usu√°rio n√£o vai ler texto longo
- Linguagem casual e amig√°vel
- Use 1-2 emojis no m√°ximo
- Cada descri√ß√£o deve ter NO M√ÅXIMO 5-7 palavras
- V√° direto ao ponto

FORMATA√á√ÉO - IMPORTANTE:
- Use **negrito** para nomes de oportunidades
- Use listas numeradas: "1. **Nome** - descri√ß√£o breve"
- M√ÅXIMO 1 linha de introdu√ß√£o${userProfile.nome ? ` (come√ßando com o nome do usu√°rio)` : ''}
- M√ÅXIMO 1 linha de encerramento
- Exemplo de formato ideal:

${userProfile.nome ? `${userProfile.nome}, achei` : 'Achei'} ${totalOpportunities} oportunidades pra voc√™! üéØ

1. **Bolsa ENEM 2024** - Bolsa integral pra faculdade
2. **Google Ateli√™** - Curso gratuito de tecnologia
3. **Hackathon Porto** - Competi√ß√£o de programa√ß√£o

Clique abaixo pra explorar todas!

Escreva APENAS a mensagem, sem introdu√ß√µes ou meta-coment√°rios.
`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© a Porti, uma assistente educacional gentil e motivadora. Escreva mensagens CURTAS, objetivas e amig√°veis.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7, // Menos criativa = mais concisa
      max_tokens: 350, // Espa√ßo para descri√ß√µes breves
      presence_penalty: 0.6,
      frequency_penalty: 0.3,
    })

    const message = completion.choices[0]?.message?.content?.trim() ||
      `Achei ${totalOpportunities} oportunidades pra voc√™! üéØ\n\n${topOpportunities.map((o, i) => `${i + 1}. **${o.title}** - ${o.shortDescription}`).join('\n')}\n\nClique abaixo pra explorar todas!`

    return message
  } catch (error) {
    console.error('Erro ao gerar mensagem de boas-vindas:', error)

    if (error instanceof OpenAI.APIError) {
      if (error.status === 401) {
        throw new Error('API Key da OpenAI inv√°lida.')
      }
      if (error.status === 429) {
        throw new Error('Limite de requisi√ß√µes atingido.')
      }
    }

    throw new Error('Erro ao gerar mensagem de boas-vindas.')
  }
}
